//Exrpessjs is a JavaScript Function, designed to be passed 
//to node's HTTP servers as a callback to handle requests.
//Express initializes app to be a function handler 
//that you can supply to an HTTP server.
var express = require('express');

var app = express();

//transfer data over the Hyper Text Transfer Protocol (HTTP).
//Import HTTP 
//The HTTP module can create an HTTP server that 
//listens to server ports and gives a response back to the client.
var http = require('http').Server(app);

//Socket.IO is a library that enables real-time, bidirectional 
//and event-based communication between the browser and the server
//nitialize a new instance of socket.io by passing the http (the HTTP server) object
var io = require('socket.io')(http);

//We define a route handler / that gets called when we hit our website home.
//the route handlers job is to map the route data and call the desired HttpHandler. 
app.get('/', function(req, res){
   res.sendFile(__dirname + '/index.html');
 });

 app.use("/static", express.static('./static/'));

//Arrays to store users and connections
users = [];
connections = [];

io.on('connection', function (socket) {
	//Add connection to Connections array
	connections.push(socket);
	//Console Log Connected sockets
	console.log('Connected: %s sockets connected', connections.length);
	//Write to clients that a user has connected
  	io.emit('connected', {
		time: new Date().toLocaleTimeString() + " user connected",
		sockets: connections.length
  	});

  	//When a User has Disconnected
  	socket.on('disconnect', function (data) {
  		//Remove connection from Connections Array
	   	connections.splice(connections.indexOf(socket), 1);
	    //Console Log Connected Sockets
        console.log('Disconnected: %s sockets connected', connections.length);
     	//Write to clients that a user has Disconnected
        io.emit('disconnected', {
		time: new Date().toLocaleTimeString() + " user disconnected",
		sockets: connections.length
  	});

  	});

   //Retriev Client Data
   socket.on('chat', function (data) {
   		io.emit('chat', data);
   		
   		console.log(data);
   });
});

//We make the http server listen on port 3000.
http.listen(3000, function(){
  console.log('listening on *:3000');
});
